What is SIEM?
SIEM stands for Security Information and Event Management. It’s like a smart security system for a company’s computers and networks.

Imagine a big room with lots of computers and devices. Every device (like your laptop, printer, or server) sends out signals or messages about what’s happening—like when someone logs in, opens a file, or tries to connect to the internet.

What Does SIEM Do?
Collects Information: SIEM gathers all these messages (also called "logs") from different devices in one place.
Monitors for Problems: It watches these logs to look for anything unusual or suspicious, like someone trying to hack into the system or accessing something they shouldn't.
Sends Alerts: If SIEM finds something bad, it sends an alert to the security team, letting them know what’s happening so they can fix it.
Helps Investigate: SIEM keeps a record of all the logs. So, if a company thinks something bad happened, they can look back and see exactly what occurred.
Why Is SIEM Important?
It’s like having a security guard that watches over all the computers and networks 24/7, making sure everything is safe. And if something goes wrong, the guard sounds the alarm right away!

Example:
Without SIEM: A company might have trouble knowing if someone is trying to hack them because all their devices are sending logs separately.
With SIEM: All the information comes together in one place, making it easier to spot problems quickly.
In Summary:
SIEM helps organizations stay safe by collecting, monitoring, and analyzing all security-related activities across their computers and networks in real-time. It keeps an eye out for bad guys trying to break in!

*Splunk
*IBM QRadar
*ArcSight (by Micro Focus)
*AlienVault (now AT&T Cybersecurity)
*LogRhythm
*Securonix
*Elastic SIEM
*McAfee Enterprise Security Manager (ESM)
*Graylog
*OSSIM (Open Source Security Information Management)

**********************************************************************************************************************************************************************************************************************

1. DOWNLOAD THE wazuh server and wazuh agent

2. OPEN VMWARE deploy windows server 2022 and Wazuh server

3. Install Vmware tools to Windows server 2022

4. After installing the vmware tools to win server 2022 - drag the wazuh agent to windows server 2022 virtual then install

5. Login to your wazuh-server
un: wazuh-user
pass: wazuh

Type: ip addr

to get the ip address and open any browser (https://0.0.0.0)
 
GUI login
un: admin
pass: admin

6. Deploy agent 
Go to Server managemnet -> Endpoints Summary -> Click "Deploy New Agent"

SELECT WINDOWS
Server address: IP of windows server
Agent name: Agent1

COPY THE COMMANDS TO STEP 4: Run the following commands to download and install the agent:
PASTE it to windows server in CMD (powershell)

DO the same to STEP 5:Copy and paste the script to windows server cmd powershell

OPEN wazuh agent type the ip address of Wazuh server then click save  
Go to manage (CLICK start) then refresh 

7.Go back to wazuh server gui Click "close"

*****Be sure to disable Real-time Protection and Firewall on Windows Defender and any security option that may block suspicious files on your browser of choice for the testing purposes!*****

8. ENABLING FILE INTEGRITY MONITORING FOR DIRECTORIES

File Integrity Monitoring (FIM) is a security process that checks and monitors files and directories on a system for changes, such as modifications, deletions, or additions. The goal of FIM is to detect unauthorized or suspicious activity that might indicate a security breach or malicious behavior.

How FIM Works:
Baseline Creation: FIM first creates a snapshot (baseline) of important files' current state. This includes file attributes like size, permissions, hashes (such as SHA or MD5), and more.

Ongoing Monitoring: After the baseline is set, the system continuously monitors these files and compares their current state to the baseline.

Alerting on Changes: If any unauthorized or unexpected changes are detected—such as someone modifying a file or deleting it—FIM generates an alert to notify administrators.

Common Use Cases:
Monitoring system and configuration files.
Detecting malware infections or file tampering.
Ensuring compliance with security regulations.
In summary, FIM helps to ensure that critical files remain unchanged unless authorized, providing a safeguard against cyberattacks or accidental damage.

9. Go to Windows server - open agent - click view - view config 
PASTE THIS COMMAND/SCRIPT: UNDER " \SysNative</directories> "

<directories realtime="yes" check_all="yes" report_changes="yes" recursion_level="10">c:\Users\Administrator\Downloads </directories>

THEN RESTART THE WAZUH AGENT 

TRY TO CREATE FILES IN DOWNLOADS:

GO TO WAZUH SERVER GUI - Endpoint Security - File Interity Monitoring - Change the date to TODAY

10. Integrating viruts total to detect malwares

Go to www.virustotal.com ( Create account or Login )
Click Profile - API KEY - Copy the API key 

Go to Wazuh server
Server Management - Settings - Edit Configuration
PASTE THIS TO LINE 82

<integration>
    <name>virustotal</name>
    <api_key>YOUR_API_KEY</api_key> <!-- Replace with your VirusTotal API key -->
    <group>syscheck</group>
    <alert_format>json</alert_format>
  </integration>

AND PASTE YOUR API KEY THEN SAVE AND RESTART YOUR WAZUH MANAGER

OPEN THIS LINK TO YOUR WINDOWS SERVER ( https://www.eicar.org/download-anti-malware-testfile/ )
DOWNLOAD SOME MALWARE FOR LABS ONLY

THEN GO TO WAZUH GUI - THREAT INTELLIGENCE - THREAT HUNTING

11. INTEGRATING WINDOWS DEFENDER LOGS
Integrating Windows Defender logs in Wazuh allows you to centrally monitor, analyze, and respond to security events detected by Windows Defender across multiple systems.

Go to wazuh sever GUI

Serve management - Endpoint Groups - Click " Add new Groups " name it " windows" then save groups

Click the "windows" groups that you created - Click " Manage Agents" add the Window server endpoint

Go to FILES tab katabi ng Agent tab under windows groups - Click Edit sign of  "Agent.conf"
PASTE THIS COMMAND:

<agent_config>
<localfile>
	<location>Microsoft-Windows-Windows Defender/Operational</location>
	<log_format>eventchannel</log_format>
</localfile>
</agent_config>

THEN CLICK SAVE

Go to Windows server open the Wazuh agent - Manage - Click Restart

Turn on the Windows Defender Real time Protection - Try to Download Malware from " https://www.eicar.org/download-anti-malware-testfile/ "
It should be reporting to Wazuh server gui - ( Threat Intillegence -  Threat hunting - Change the date " Today" )

12. INTEGRATING SYSMON TO DETECT FILELESS MALWARE
Integrating Sysmon with Wazuh enables detection of fileless malware by providing detailed logs on system activity, including process creation, network connections, and in-memory code execution. Fileless malware typically operates in memory, avoiding traditional file-based detection. Sysmon captures in-depth behavioral data, which Wazuh can analyze for suspicious patterns indicative of fileless attacks. 

Go to Windows server open browser download this " https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon " then extract on the same directory

Go to this link " https://github.com/SwiftOnSecurity/sysmon-config " click the code ( green color ) then click Download - Also extract after downloading

Open the folder " sysmon-config master " copy all the files then paste it to  " Sysmon Folder "

Then Open CMD PowerShell - go to the directory of " sysmon folder " ( C:\Users\Administrator\Downloads\Sysmon ) then paste this command to CMD Powershell ( .\sysmon.exe -accepteula -i sysmonconfig-export.xml )

OUTPUT TO CMD:
System Monitor v15.15 - System activity monitor
By Mark Russinovich and Thomas Garnier
Copyright (C) 2014-2024 Microsoft Corporation
Using libxml2. libxml2 is Copyright (C) 1998-2012 Daniel Veillard. All Rights Reserved.
Sysinternals - www.sysinternals.com

Loading configuration file with schema version 4.50
Sysmon schema version: 4.90
Configuration file validated.
Sysmon installed.
SysmonDrv installed.
Starting SysmonDrv.
SysmonDrv started.
Starting Sysmon..
Sysmon started.

To Check go to windows server - Event viewer - Applications and Services Logs > Microsoft > Windows > Sysmon > Operational

Go to Wazuh server GUI - SERVER MANAGEMENT -> ENDPOINT GROUPS -> WINDOWS -> FILES -> agent.conf
PASTE THIS COMMAND:  LINE 6

<localfile>
	<location>Microsoft-Windows-Sysmon/Operational</location>
	<log_format>eventchannel</log_format>
</localfile>

THEN CLICK SAVE 

Go to Wazuh server GUI - Server Management > Rules > Custom Rules > Add New Rules File - name it " custom_sysmon "
PASTE THIS COMMAND:

<!-- Log Sysmon Alerts -->
<group name="sysmon">
    <rule id="101100" level="5">
    <if_sid>61650</if_sid>
    <description>Sysmon - Event 22: DNS Query.</description>
    <options>no_full_log</options>
    </rule>

    <rule id="101101" level="5">
        <if_sid>61603</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 1: Process creation.</description>
    </rule>

    <rule id="101102" level="5">
        <if_sid>61604</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 2: A process changed a file creation time.</description>
    </rule>

    <rule id="101103" level="5">
        <if_sid>61605</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 3: Network connection.</description>
    </rule>
    
    <rule id="101104" level="5">
        <if_sid>61606</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 4: Sysmon service state changed.</description>
    </rule>

    <rule id="101105" level="5">
        <if_sid>61607</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 5: Process terminated.</description>
    </rule>

    <rule id="101106" level="5">
        <if_sid>61608</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 6: Driver loaded.</description>
    </rule>
    
    <rule id="101107" level="5">
        <if_sid>61609</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 7: Image loaded.</description>
    </rule>

    <rule id="101108" level="5">
        <if_sid>61610</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 8: CreateRemoteThread.</description>
        </rule>

    <rule id="101109" level="5">
        <if_sid>61611</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 9: RawAccessRead.</description>
    </rule>

    <rule id="101110" level="5">
        <if_sid>61612</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 10: ProcessAccess.</description>
    </rule>
    
    <rule id="101111" level="5">
        <if_sid>61613</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 11: FileCreate.</description>
    </rule>
    
    <rule id="101112" level="5">
        <if_sid>61614</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 12: RegistryEvent (Object create and delete).</description>
    </rule>
    
    <rule id="101113" level="5">
        <if_sid>61615</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 13: RegistryEvent (Value Set).</description>
    </rule>

    <rule id="101114" level="5">
        <if_sid>61616</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 14: RegistryEvent (Key and Value Rename).</description>
    </rule>
    
    <rule id="101115" level="5">
        <if_sid>61617</if_sid>
        <options>no_full_log</options>
        <description>Sysmon - Event 15: FileCreateStreamHash.</description>
    </rule>
</group>

THEN CLICK SAVE THEN RESTART

An APT simulator is used in cybersecurity to mimic advanced attack techniques to test and improve an organization's defenses. It’s essential for validating security controls, training incident response teams, optimizing threat detection tools, and assessing compliance and risk.

Go to Windows server Turn Off Real time protection then go to this link " https://github.com/NextronSystems/APTSimulator " Click Code - Download ZIP 
Go to Downloads - Extract the file - then open it - double click the APT Simulator to run the lab - 

Then Go To Wazuh server gui - Threat Intelligence - Threat hunting - You will all the logs made by APT simulator

13. INCIDENT RESPONSE
BLOCKING POSSIBLE RDP BRUTE-FORCE ATTACKS
This includes monitoring for repeated login failures, setting alerts for unusual RDP activity, and blocking IP addresses showing suspicious behavior. 

Go to Windows server - Settings - Remote Desktop - Enable Remote Desktop
Go to Wazuh agent of windows sever - Click view - select view config
PASTE THIS UNDER " Active Response " :

<command>
    <name>netsh</name>
    <executable>netsh.exe</executable>
    <timeout_allowed>yes</timeout_allowed>
 </command>

 <active-response>
    <disabled>no</disabled>
    <command>netsh</command>
    <location>local</location>
    <rules_id>100100</rules_id>
 </active-response>

THEN SAVE - MANAGE - SELECT RESTART

Go to Wazuh server GUI -  Server Management > Rules > Custom Rules > local_rules.xml
PASTE THIS COMMAND TO LINE 21:

<group name="rdp">
    <rule id="100100" level="10" frequency="3" timeframe="120">
    <if_matched_sid>60122</if_matched_sid>
    <description>Possible RDP attack: 3 failed logins in a short period of time</description>
    </rule>
</group>

CLICK SAVE AND RESTART

Go to Wazuh server GUI - Server Management > Settings > Edit Configuration.
PASTE THIS COMMAND TO LINE - HIGLIGHT 240-244:

<active-response>
  <disabled>no</disabled>
   <command>firewall-drop</command>
   <location>local</location>
   <rules_id>5710</rules_id>
   <timeout>60</timeout>
</active-response>

CLICK SAVE THEN RESTART

TO TEST THE SIMULATION LAB OPEN VIRUTAL KALI LINUX OPEN TERMINAL
Open terminal : 
cd /usr/share/wordlists

hydra -l administrator -P rockyou.txt TARGET_IP_ADDRESS rdp

Go to Wazuh server gui to see the logs - threat intillegence - threat hunting

14. Detecting and removing malware using VirusTotal integration
Go to windows server - dowload python ( https://www.python.org/downloads/windows/ )
Go to downloads install as administrator the installer - Select custom then ( CHECK ALL THE BOX )

After installing - open notepad 
PASTE THIS COMMAND: save as ( remove-threat.py ) to documents

#!/usr/bin/python3
# Copyright (C) 2015-2022, Wazuh Inc.
# All rights reserved.

import os
import sys
import json
import datetime

if os.name == 'nt':
    LOG_FILE = "C:\\Program Files (x86)\\ossec-agent\\active-response\\active-responses.log"
else:
    LOG_FILE = "/var/ossec/logs/active-responses.log"

ADD_COMMAND = 0
DELETE_COMMAND = 1
CONTINUE_COMMAND = 2
ABORT_COMMAND = 3

OS_SUCCESS = 0
OS_INVALID = -1

class message:
    def __init__(self):
        self.alert = ""
        self.command = 0

def write_debug_file(ar_name, msg):
    with open(LOG_FILE, mode="a") as log_file:
        log_file.write(str(datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')) + " " + ar_name + ": " + msg +"\n")

def setup_and_check_message(argv):

    # get alert from stdin
    input_str = ""
    for line in sys.stdin:
        input_str = line
        break


    try:
        data = json.loads(input_str)
    except ValueError:
        write_debug_file(argv[0], 'Decoding JSON has failed, invalid input format')
        message.command = OS_INVALID
        return message

    message.alert = data

    command = data.get("command")

    if command == "add":
        message.command = ADD_COMMAND
    elif command == "delete":
        message.command = DELETE_COMMAND
    else:
        message.command = OS_INVALID
        write_debug_file(argv[0], 'Not valid command: ' + command)

    return message


def send_keys_and_check_message(argv, keys):

    # build and send message with keys
    keys_msg = json.dumps({"version": 1,"origin":{"name": argv[0],"module":"active-response"},"command":"check_keys","parameters":{"keys":keys}})

    write_debug_file(argv[0], keys_msg)

    print(keys_msg)
    sys.stdout.flush()

    # read the response of previous message
    input_str = ""
    while True:
        line = sys.stdin.readline()
        if line:
            input_str = line
            break

    # write_debug_file(argv[0], input_str)

    try:
        data = json.loads(input_str)
    except ValueError:
        write_debug_file(argv[0], 'Decoding JSON has failed, invalid input format')
        return message

    action = data.get("command")

    if "continue" == action:
        ret = CONTINUE_COMMAND
    elif "abort" == action:
        ret = ABORT_COMMAND
    else:
        ret = OS_INVALID
        write_debug_file(argv[0], "Invalid value of 'command'")

    return ret

def main(argv):

    write_debug_file(argv[0], "Started")

    # validate json and get command
    msg = setup_and_check_message(argv)

    if msg.command < 0:
        sys.exit(OS_INVALID)

    if msg.command == ADD_COMMAND:
        alert = msg.alert["parameters"]["alert"]
        keys = [alert["rule"]["id"]]
        action = send_keys_and_check_message(argv, keys)

        # if necessary, abort execution
        if action != CONTINUE_COMMAND:

            if action == ABORT_COMMAND:
                write_debug_file(argv[0], "Aborted")
                sys.exit(OS_SUCCESS)
            else:
                write_debug_file(argv[0], "Invalid command")
                sys.exit(OS_INVALID)

        try:
            file_path = msg.alert["parameters"]["alert"]["data"]["virustotal"]["source"]["file"]
            if os.path.exists(file_path):
                os.remove(file_path)
            write_debug_file(argv[0], json.dumps(msg.alert) + " Successfully removed threat")
        except OSError as error:
            write_debug_file(argv[0], json.dumps(msg.alert) + "Error removing threat")


    else:
        write_debug_file(argv[0], "Invalid command")

    write_debug_file(argv[0], "Ended")

    sys.exit(OS_SUCCESS)

if __name__ == "__main__":
    main(sys.argv)


#SAVE AS ( remove-threat.py )



OPEN CMD PASTE THIS COMMANDS:

pip install pyinstaller
pyinstaller -F C:/Users/Administrator/Documents/remove-threat.py

Go to wazuh server GUI - server management - settings - Edit Configuration 
PASTE THIS COMMNAD TO LINE : 248

  <command>
    <name>remove-threat</name>
    <executable>remove-threat.exe</executable>
    <timeout_allowed>no</timeout_allowed>
  </command>

  <active-response>
    <disabled>no</disabled>
    <command>remove-threat</command>
    <location>local</location>
    <rules_id>87105</rules_id>
  </active-response>

SAVE AND RESTART THE WAZUH SERVER GUI

 
Go to wazuh gui server - server management - rules - Click " Custome Rules " - Click the "local_rules.xml " of RDP
THEN PASTE THIS COMMAND: LINE 30

<group name="virustotal,">
  <rule id="100092" level="12">
      <if_sid>657</if_sid>
      <match>Successfully removed threat</match>
      <description>$(parameters.program) removed threat located at $(parameters.alert.data.virustotal.source.file)</description>
  </rule>

  <rule id="100093" level="12">
    <if_sid>657</if_sid>
    <match>Error removing threat</match>
    <description>Error removing threat located at $(parameters.alert.data.virustotal.source.file)</description>
  </rule>
</group>

THEN SAVE AND RESTART

TRY TO DOWNLOAD MALWARETO WINDOWS SERVER
https://www.eicar.org/download-anti-malware-testfile/

THEN GO TO WAZUH GUI - THREAT INTILLIGENCE - THREAT HUNTING


**********************************************************************************************************************************************************************************************************************
https://drive.google.com/drive/u/1/folders/1-b9a0WzKXwc_-k970MOvpI26nlr0tk9b



